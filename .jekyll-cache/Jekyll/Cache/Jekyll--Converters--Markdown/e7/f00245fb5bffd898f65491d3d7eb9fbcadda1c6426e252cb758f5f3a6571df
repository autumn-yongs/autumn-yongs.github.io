I"¾$<h2 id="preface">Preface</h2>

<p>You can work on a project without remote repository unless you were in the group. If not, youâ€™ll need it. Group members have to share files through somewhere shared place. For that, remote repository, pushing, pulling, branching, and some functions of Git are required.</p>

<blockquote>
  <p>Reading my article or not depends on you, but if you want to read super accurate and trustworthy document, take this Gitâ€™s official document.</p>

  <p><a href="https://git-scm.com/book/en/v2">Official Git Website</a></p>
</blockquote>

<h2 id="lets-move-on">Letâ€™s move on!</h2>

<h3 id="setting-a-remote-repository-for-your-project">Setting a remote repository for your project</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$ git remote -v</code>
    <ul>
      <li>View your remote repositories. If you command it for the first time after you created the project with <code class="language-plaintext highlighter-rouge">$ git init</code>, there would be nothing.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git remote add [name] [URL]</code>
    <ul>
      <li>Add information of remote repository in Gitâ€™s configuration file. If you donâ€™t mind, just write [name] as â€˜originâ€™. The reason is on below.</li>
      <li>
        <blockquote>
          <p>Naming remote repository as â€˜originâ€™ is general, because console uses â€˜originâ€™ as default remote repository when you omit it in <code class="language-plaintext highlighter-rouge">push</code> or <code class="language-plaintext highlighter-rouge">pull</code> commands.</p>

          <p>If you donâ€™t know about those commands, never mind. I will tell you about that on the next part of this article. Skip this, and come back here later.</p>
        </blockquote>
      </li>
      <li>For example, <code class="language-plaintext highlighter-rouge">$ git remote add origin [your Github repository URL]</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git remote -v</code>
    <ul>
      <li>Type this command again. Now you can see your remote repository is added.</li>
      <li>You can also check it in gitâ€™s configuration file. Command <code class="language-plaintext highlighter-rouge">$ git config --list</code>.</li>
    </ul>
  </li>
</ul>

<h3 id="what-is-branch">What is â€˜branchâ€™?</h3>

<ul>
  <li>
    <p>Before using remote repository, you have to know about branch. I wonâ€™t explain it in detail cause its content is super massive in itself. In this post, therefore, Iâ€™ll make it as simple as possible. Letâ€™s talk about it later in detail. Letâ€™s get started!</p>
  </li>
  <li>
    <p>Git stores projectâ€™s status and history as a series of snapshots. We call each snapshot as â€˜commitâ€™.</p>
  </li>
  <li>
    <p>When you command <code class="language-plaintext highlighter-rouge">$ git commit</code>, Git takes a snapshot and stores them as a tree object in the Git repository. In other words, Git makes an object(commit) and link it to other object which is made before.</p>
  </li>
  <li>
    <p>You can run your project on just one track by linking new object to one of the most recent one, but you also can manage project on two or more tracks by ramifying new object from specific track, <strong>which is branching</strong>.</p>
  </li>
  <li>
    <p>One project can be managed with many branches, and the default branch among those is called <strong>master</strong> branch.</p>
  </li>
</ul>

<h3 id="put-your-project-on-and-get-project-from-remote-repository">Put your project on and Get project from remote repository</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$ git push origin master</code>
    <ul>
      <li>Literally, this command says, â€œHey, Git. Push <strong>master</strong> branchâ€™s history to remote repository which is <strong>origin</strong>.</li>
      <li>On your first try, this puts your local project on remote repository. And on tries after that, this updates your remote repository whenever you type.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git pull origin</code>
    <ul>
      <li>This causes exactly the reverse case against the former. This updates your local repository with remote one, while <code class="language-plaintext highlighter-rouge">push</code> updates remote one with local one.</li>
      <li>Explaining what exactly happens in tree in the Git repository when you call this would confuse you. For now, never mind. Iâ€™ll explain it below. This command would not make errors unless you work in group.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git fetch origin</code>
    <ul>
      <li>This gets data from origin, remote repository. But this does not update your local repository. That is what you have to do.</li>
    </ul>
  </li>
</ul>

<h3 id="what-happens-in-my-local-git-repository">What happens in my local Git repository?</h3>

<ul>
  <li>
    <p>I told you that the local Git repository stores snapshots as a tree object. And the tracks consist of several snapshots are called branches.</p>
  </li>
  <li>
    <p>The command <code class="language-plaintext highlighter-rouge">pull</code> and <code class="language-plaintext highlighter-rouge">fetch</code> make new branch when they are called. That branch ramifies from the last pushed object.</p>
  </li>
  <li>
    <p>I said that the difference is on <strong>update</strong>. <code class="language-plaintext highlighter-rouge">$ git fetch origin</code> command makes new branch called <strong>origin/master</strong>, but it does not merge it with original branch, master branch on local repository. You have to find differences between local and remote repository yourself and merge it personally.</p>
  </li>
  <li>
    <p>However, <code class="language-plaintext highlighter-rouge">$ git pull origin</code> makes new branch and find differences itself. And then merge it with original branch immediately.</p>
  </li>
  <li>
    <p>We donâ€™t have to find differences by ourselves when we call <code class="language-plaintext highlighter-rouge">pull</code>. Sounds great! But, sometimes, some problems arise on account of that.</p>
  </li>
</ul>

<h3 id="work-in-group-using-remote-repository">Work in group using remote repository</h3>

<ul>
  <li>
    <p>You donâ€™t have to worry about integrity of remote repository if you work alone. But there would be some problems when you work in group.</p>
  </li>
  <li>
    <p>Suppose that you were working in specific branch(in this example, <strong>origin</strong>) with your group members. You updated your local repository by commanding <code class="language-plaintext highlighter-rouge">$ git pull origin</code> to modify some codes.</p>
  </li>
  <li>
    <p>After that, other group member pushed their project while you were working on your local repository. You edited some codes and that was same part that the member modified.</p>
  </li>
  <li>
    <p>You finished your work and tried to push your work on remote repository. But, the Git, eventually, rejected your request. The reason was, Git did not know which code it should choose.</p>
  </li>
</ul>

<h3 id="merging-with-newly-created-branch-fetch">Merging with newly created branch: Fetch</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$ git merge origin/master</code>
    <ul>
      <li>If you donâ€™t know about changing branch, maybe you are in <strong>master</strong> branch. And this command merges <strong>origin/master</strong> branch with the branch now you are in, <strong>master</strong>.</li>
      <li>You can command this if you want to be careful on your project. However, if you are going to merge right after commanding <code class="language-plaintext highlighter-rouge">fetch</code>, just typing <code class="language-plaintext highlighter-rouge">pull</code> is highly recommended.</li>
    </ul>
  </li>
</ul>

<h2 id="merging-with-newly-created-branch-pull">Merging with newly created branch: Pull</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$ git pull origin</code>
    <ul>
      <li>If the message after this command shows no problems, thereâ€™s no need to merge. But, if there is conflict, you can find message with which files have problems.</li>
      <li>hello
```text
Â«Â«Â«&lt; HEAD:index.html</li>
    </ul>
  </li>
</ul>
<div id="footer">contact : email.support@github.com</div>
<p>=======</p>
<div id="footer">
 please contact us at support@github.com
</div>
<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <blockquote>
            <blockquote>
              <p>iss53:index.html
```</p>
            </blockquote>
          </blockquote>
        </blockquote>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://git-scm.com/book/en/v2">Official Git Website</a></li>
  <li><a href="https://medium.com/@pks2974/%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B8%B0%EC%B4%88-git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-533b3689db81">Basic Git commands frequently being used</a></li>
  <li><a href="https://backlog.com/git-tutorial/kr/stepup/stepup3_1.html">Git introduction, easy to understand</a></li>
</ul>

:ET