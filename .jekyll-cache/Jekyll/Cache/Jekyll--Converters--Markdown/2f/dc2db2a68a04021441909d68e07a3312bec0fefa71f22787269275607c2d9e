I""<h2 id="preface">Preface</h2>

<p>You can work on a project without remote repository unless you were on the group. If not, you’ll need it. Group members have to share files through somewhere shared place. For that, remote repository, pushing, pulling, branching, and some functions of Git are required.</p>

<blockquote>
  <p>This article is a part of Egoing’s youtube lecture <strong>지옥에서 온 Git (Git from the hell)</strong>. Contents might not be exactly same with the sequence of lectures as I reorganized that in my way.</p>

  <p><a href="https://youtu.be/hFJZwOfme6w">지옥에서 온 Git (Git from the hell)</a></p>

  <p>Reading my article or not depends on you, but if you want to read super accurate and trustworthy document, take this Git’s official document.</p>

  <p><a href="https://git-scm.com/book/en/v2">Official Git Website</a></p>
</blockquote>

<h2 id="lets-move-on">Let’s move on!</h2>

<h3 id="setting-a-remote-repository-for-your-project">Setting a remote repository for your project</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$ git remote -v</code>
    <ul>
      <li>View your remote repositories. If you command it for the first time after you created the project with <code class="language-plaintext highlighter-rouge">$ git init</code>, there would be nothing.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git remote add [name] [URL]</code>
    <ul>
      <li>Add information of remote repository in Git’s configuration file. If you don’t mind, just write [name] as ‘origin’. The reason is on below.</li>
      <li>
        <blockquote>
          <p>Naming remote repository as ‘origin’ is general, because console uses ‘origin’ as default remote repository when you omit it in <code class="language-plaintext highlighter-rouge">push</code> or <code class="language-plaintext highlighter-rouge">pull</code> commands.</p>

          <p>If you don’t know about those commands, never mind. I will tell you about that on the next part of this article. Skip this, and come back here later.</p>
        </blockquote>
      </li>
      <li>For example, <code class="language-plaintext highlighter-rouge">$ git remote add origin [your Github repository URL]</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git remote -v</code>
    <ul>
      <li>Type this command again. Now you can see your remote repository is added.</li>
      <li>You can also check it in git’s configuration file. Command <code class="language-plaintext highlighter-rouge">$ git config --list</code>.</li>
    </ul>
  </li>
</ul>

<h3 id="what-is-branch">What is ‘branch’?</h3>

<ul>
  <li>
    <p>Before using remote repository, you have to know about branch. I won’t explain it in detail cause its content is super massive in itself. In this post, therefore, I’ll make it as simple as possible. Let’s talk about it later in detail. Let’s get started!</p>
  </li>
  <li>
    <p>Git stores project’s status and history as a series of snapshots. We call each snapshot as ‘commit’.</p>
  </li>
  <li>
    <p>When you command <code class="language-plaintext highlighter-rouge">$ git commit</code>, Git takes a snapshot and stores them as a tree object in the Git repository. In other words, Git makes an object(commit) and link it to other object which is made before.</p>
  </li>
  <li>
    <p>You can run your project on just one track by linking new object to one of the most recent one, but you also can manage project on two or more tracks by ramifying new object from specific track, <strong>which is branching</strong>.</p>
  </li>
  <li>
    <p>One project can be managed with many branches, and the default branch among those is called <strong>master</strong> branch.</p>
  </li>
</ul>

<h3 id="put-your-project-on-and-get-project-from-remote-repository">Put your project on and Get project from remote repository</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$ git push origin master</code>
    <ul>
      <li>Literally, this command says, “Hey, Git. Push <strong>master</strong> branch’s history to remote repository which is <strong>origin</strong>.</li>
      <li>On your first try, this put your local project on remote repository. And on tries after that, this updates your remote repository whenever you type.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">$ git pull origin</code>
    <ul>
      <li>This causes the reverse case against the former.</li>
      <li>This updates your local repository with remote one, while <code class="language-plaintext highlighter-rouge">push</code> updates remote one with local one.</li>
    </ul>
  </li>
</ul>

<h3 id="during-project">During project</h3>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://youtu.be/hFJZwOfme6w">지옥에서 온 Git (Git from the hell)</a></li>
  <li><a href="https://git-scm.com/book/en/v2">Official Git Website</a></li>
  <li><a href="https://medium.com/@pks2974/%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B8%B0%EC%B4%88-git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-533b3689db81">Basic Git commands frequently being used</a></li>
  <li><a href="https://backlog.com/git-tutorial/kr/stepup/stepup3_1.html">Git introduction, easy to understand</a></li>
</ul>

:ET